#! /usr/bin/python
import os
import time
import logging
import traceback

from upstart.daemon import Daemon
from upstart.settings import SETTINGS_MANAGER
from upstart.manager import Manager

log = logging.getLogger('daemon-runtime')
handler = logging.FileHandler(SETTINGS_MANAGER['log']['dir'] + SETTINGS_MANAGER['log']['filename'])

handler.setFormatter(logging.Formatter('%(asctime)s %(process)d/%(thread)d %(levelname)s %(message)s'))
handler.setLevel(SETTINGS_MANAGER['log']['level'])
log.addHandler(handler)
logging.root.setLevel(SETTINGS_MANAGER['log']['level'])


class DaemonManager(Daemon):
    def __init__(self, *args, **kwargs):
        super(DaemonManager, self).__init__(*args, **kwargs)
        self.daemon_manager = Manager(SETTINGS_MANAGER['configs'])

    def run(self):
        while True:
            all_ok = True
            try:
                for daemon_name, daemon in self.daemon_manager.daemons.iteritems():
                    if daemon.crash_number < daemon.respawn_limit and \
                            daemon.respawn_time + daemon.respawn_interval < time.time() and \
                            not self.daemon_manager.status(daemon_name):
                        daemon.crash_number += 1
                        log.info('daemon %s crashed %s times', daemon_name, daemon.crash_number)
                        self.daemon_manager.restart(daemon_name)
                        log.info('restarted daemon %s', daemon_name)
                        daemon.respawn_time = time.time()
                        all_ok = False

                if all_ok:
                    time.sleep(SETTINGS_MANAGER['sleep'])
            except Exception, e:
                log.error('error occured %s \n%s', e, traceback.format_exc())

    def reload(self):
        self.daemon_manager = Manager(SETTINGS_MANAGER['configs'])


if __name__ == '__main__':
    try:
        DaemonManager(
            log=log,
            pidfile=os.path.abspath(SETTINGS_MANAGER['pid']),
            user='root',
            stop_timeout=5
        ).execute()
    except Exception, e:
        log.error('error occured %s \n%s', e, traceback.format_exc())
        print 'Error: %s' % e